// Generated by PeachPy 0.2.0 from core.py


// func chaskeyCore(h uintptr, m_base uintptr, m_len int64, m_cap int64, tag_base uintptr, tag_len int64, tag_cap int64)
TEXT Â·chaskeyCore(SB),4,$0-56
	MOVQ h+0(FP), DI
	MOVL 0(DI), AX
	MOVL 4(DI), BX
	MOVL 8(DI), CX
	MOVL 12(DI), DX
	MOVQ 48(DI), SI
	MOVQ m_base+8(FP), BP
	MOVQ m_len+16(FP), R8
	CMPQ R8, $16
	JLE loop0_end
loop0_begin:
		XORL 0(BP), AX
		XORL 4(BP), BX
		XORL 8(BP), CX
		XORL 12(BP), DX
		MOVQ SI, R9
loop2_begin:
			ADDL BX, AX
			ROLL $5, BX
			XORL AX, BX
			ROLL $16, AX
			ADDL DX, CX
			ROLL $8, DX
			XORL CX, DX
			ADDL DX, AX
			ROLL $13, DX
			XORL AX, DX
			ADDL BX, CX
			ROLL $7, BX
			XORL CX, BX
			ROLL $16, CX
			DECQ R9
			JNE loop2_begin
		ADDQ $16, BP
		SUBQ $16, R8
		CMPQ R8, $16
		JGT loop0_begin
loop0_end:
	MOVQ DI, DI
	CMPQ R8, $16
	JNE switch
	ADDQ $16, DI
	XORL 0(BP), AX
	XORL 4(BP), BX
	XORL 8(BP), CX
	XORL 12(BP), DX
	JMP afterSwitch
switch:
	ADDQ $32, DI
	MOVQ tag_base+32(FP), R9
	MOVQ $0, 0(R9)
	MOVQ $0, 8(R9)
	CMPQ R8, $0
	JEQ sw0
	CMPQ R8, $1
	JEQ sw1
	CMPQ R8, $2
	JEQ sw2
	CMPQ R8, $3
	JEQ sw3
	CMPQ R8, $4
	JEQ sw4
	CMPQ R8, $5
	JEQ sw5
	CMPQ R8, $6
	JEQ sw6
	CMPQ R8, $7
	JEQ sw7
	CMPQ R8, $8
	JEQ sw8
	CMPQ R8, $9
	JEQ sw9
	CMPQ R8, $10
	JEQ sw10
	CMPQ R8, $11
	JEQ sw11
	CMPQ R8, $12
	JEQ sw12
	CMPQ R8, $13
	JEQ sw13
	CMPQ R8, $14
	JEQ sw14
	CMPQ R8, $15
	JEQ sw15
sw15:
	MOVB 14(BP), R10
	MOVB R10, 14(R9)
sw14:
	MOVB 13(BP), R10
	MOVB R10, 13(R9)
sw13:
	MOVB 12(BP), R10
	MOVB R10, 12(R9)
sw12:
	MOVB 11(BP), R10
	MOVB R10, 11(R9)
sw11:
	MOVB 10(BP), R10
	MOVB R10, 10(R9)
sw10:
	MOVB 9(BP), R10
	MOVB R10, 9(R9)
sw9:
	MOVB 8(BP), R10
	MOVB R10, 8(R9)
sw8:
	MOVB 7(BP), R10
	MOVB R10, 7(R9)
sw7:
	MOVB 6(BP), R10
	MOVB R10, 6(R9)
sw6:
	MOVB 5(BP), R10
	MOVB R10, 5(R9)
sw5:
	MOVB 4(BP), R10
	MOVB R10, 4(R9)
sw4:
	MOVB 3(BP), R10
	MOVB R10, 3(R9)
sw3:
	MOVB 2(BP), R10
	MOVB R10, 2(R9)
sw2:
	MOVB 1(BP), R10
	MOVB R10, 1(R9)
sw1:
	MOVB 0(BP), R10
	MOVB R10, 0(R9)
sw0:
	ADDQ R8, R9
	MOVB $1, 0(R9)
	SUBQ R8, R9
	XORL 0(R9), AX
	XORL 4(R9), BX
	XORL 8(R9), CX
	XORL 12(R9), DX
afterSwitch:
	XORL 0(DI), AX
	XORL 4(DI), BX
	XORL 8(DI), CX
	XORL 12(DI), DX
	MOVQ SI, SI
loop1_begin:
		ADDL BX, AX
		ROLL $5, BX
		XORL AX, BX
		ROLL $16, AX
		ADDL DX, CX
		ROLL $8, DX
		XORL CX, DX
		ADDL DX, AX
		ROLL $13, DX
		XORL AX, DX
		ADDL BX, CX
		ROLL $7, BX
		XORL CX, BX
		ROLL $16, CX
		DECQ SI
		JNE loop1_begin
	XORL 0(DI), AX
	XORL 4(DI), BX
	XORL 8(DI), CX
	XORL 12(DI), DX
	MOVQ tag_base+32(FP), DI
	MOVL AX, 0(DI)
	MOVL BX, 4(DI)
	MOVL CX, 8(DI)
	MOVL DX, 12(DI)
	RET
