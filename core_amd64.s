// +build amd64
// +build !purego
// Code generated by command: go run asm.go -out core_amd64.s. DO NOT EDIT.

#include "textflag.h"

// func chaskeyCore(h *H, m []byte, tag []byte)
TEXT Â·chaskeyCore(SB), NOSPLIT, $0-56
	MOVQ h+0(FP), BP
	MOVL (BP), AX
	MOVL 4(BP), CX
	MOVL 8(BP), DX
	MOVL 12(BP), BX
	MOVQ 48(BP), SI
	MOVQ m_base+8(FP), DI
	MOVQ m_len+16(FP), R8
	CMPQ R8, $0x10
	JLE  loop0_end

loop0_begin:
	XORL (DI), AX
	XORL 4(DI), CX
	XORL 8(DI), DX
	XORL 12(DI), BX
	MOVQ SI, R9

loop1_begin:
	ADDL CX, AX
	ADDL BX, DX
	ROLL $0x05, CX
	ROLL $0x08, BX
	XORL AX, CX
	XORL DX, BX
	ROLL $0x10, AX
	ADDL BX, AX
	ADDL CX, DX
	ROLL $0x0d, BX
	ROLL $0x07, CX
	XORL AX, BX
	XORL DX, CX
	ROLL $0x10, DX
	DECQ R9
	JNZ  loop1_begin
	ADDQ $0x10, DI
	SUBQ $0x10, R8
	CMPQ R8, $0x10
	JG   loop0_begin

loop0_end:
	CMPQ R8, $0x10
	JNZ  switch
	ADDQ $0x10, BP
	XORL (DI), AX
	XORL 4(DI), CX
	XORL 8(DI), DX
	XORL 12(DI), BX
	JMP  afterSwitch

switch:
	ADDQ $0x20, BP
	MOVQ tag_base+32(FP), R9
	MOVQ $0x00000000, (R9)
	MOVQ $0x00000000, 8(R9)
	CMPQ R8, $0x00
	JE   sw0
	CMPQ R8, $0x01
	JE   sw1
	CMPQ R8, $0x02
	JE   sw2
	CMPQ R8, $0x03
	JE   sw3
	CMPQ R8, $0x04
	JE   sw4
	CMPQ R8, $0x05
	JE   sw5
	CMPQ R8, $0x06
	JE   sw6
	CMPQ R8, $0x07
	JE   sw7
	CMPQ R8, $0x08
	JE   sw8
	CMPQ R8, $0x09
	JE   sw9
	CMPQ R8, $0x0a
	JE   sw10
	CMPQ R8, $0x0b
	JE   sw11
	CMPQ R8, $0x0c
	JE   sw12
	CMPQ R8, $0x0d
	JE   sw13
	CMPQ R8, $0x0e
	JE   sw14
	CMPQ R8, $0x0f
	JE   sw15

sw15:
	MOVB 14(DI), R10
	MOVB R10, 14(R9)

sw14:
	MOVB 13(DI), R10
	MOVB R10, 13(R9)

sw13:
	MOVB 12(DI), R10
	MOVB R10, 12(R9)

sw12:
	MOVB 11(DI), R10
	MOVB R10, 11(R9)

sw11:
	MOVB 10(DI), R10
	MOVB R10, 10(R9)

sw10:
	MOVB 9(DI), R10
	MOVB R10, 9(R9)

sw9:
	MOVB 8(DI), R10
	MOVB R10, 8(R9)

sw8:
	MOVB 7(DI), R10
	MOVB R10, 7(R9)

sw7:
	MOVB 6(DI), R10
	MOVB R10, 6(R9)

sw6:
	MOVB 5(DI), R10
	MOVB R10, 5(R9)

sw5:
	MOVB 4(DI), R10
	MOVB R10, 4(R9)

sw4:
	MOVB 3(DI), R10
	MOVB R10, 3(R9)

sw3:
	MOVB 2(DI), R10
	MOVB R10, 2(R9)

sw2:
	MOVB 1(DI), R10
	MOVB R10, 1(R9)

sw1:
	MOVB (DI), R10
	MOVB R10, (R9)

sw0:
	ADDQ R8, R9
	MOVB $0x01, (R9)
	SUBQ R8, R9
	XORL (R9), AX
	XORL 4(R9), CX
	XORL 8(R9), DX
	XORL 12(R9), BX

afterSwitch:
	XORL (BP), AX
	XORL 4(BP), CX
	XORL 8(BP), DX
	XORL 12(BP), BX

loop2_begin:
	ADDL CX, AX
	ADDL BX, DX
	ROLL $0x05, CX
	ROLL $0x08, BX
	XORL AX, CX
	XORL DX, BX
	ROLL $0x10, AX
	ADDL BX, AX
	ADDL CX, DX
	ROLL $0x0d, BX
	ROLL $0x07, CX
	XORL AX, BX
	XORL DX, CX
	ROLL $0x10, DX
	DECQ SI
	JNZ  loop2_begin
	XORL (BP), AX
	XORL 4(BP), CX
	XORL 8(BP), DX
	XORL 12(BP), BX
	MOVQ tag_base+32(FP), BP
	MOVL AX, (BP)
	MOVL CX, 4(BP)
	MOVL DX, 8(BP)
	MOVL BX, 12(BP)
	RET
